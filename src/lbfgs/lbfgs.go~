package lbfgs

import (
 //   "fmt"
    "math"
)

const (
    EPS          = 1e-7
    FTOL         = 1e-4
    XTOL         = 1e-16
    LB3_1_stpmax = 1e20
    LB3_1_stpmin = 1e-20
    LB3_1_mp     = 6
    LB3_1_lp     = 6
    LB3_1_gtol   = 0.9
)

type Mcsrch struct {
    stage1                                   bool
    brackt                                   bool
    infoc                                    int
    finit, dginit, dgtest, width, width1     float64
    stx, fx, dgx, sty, fy, dgy, stmin, stmax float64
}

type Lbfgs struct {
    iflag_    int
    iscn      int
    nfev      int
    iycn      int
    point     int
    npt       int
    iter      int
    info      int
    ispt      int //point to sk index, N+2m ~ (m+1)*N+2m-1 -----mN
    isyt      int //point to yk index, (m+1)*N+2m ~ (2m+1)*N+2m-----mN
    iypt      int
    maxfev    int
    stp, stp1 float64
    diag_     []float64 //diagonal identity matrix
    w_        []float64 //workspace, N(2*M+1)+2M
    v_        []float64
    xi_       []float64
    mc_       *Mcsrch
}

var DefaultLbfgs = new(Lbfgs)

func (mc *Mcsrch) mcsrch(size int, x []float64, f float64, g []float64, s []float64, stp float64, info int, nfev int, wa []float64) (float64, int, int) {
    p5 := 0.5
    p66 := 0.66
    xtrapf := 4.0
    maxfev := 20

    //fmt.Println("start with info: ", info)
    if info != -1 {
        mc.infoc = 1
        if size <= 0 || stp <= 0.0 {
            //fmt.Println("exit with info: ", info)
            return stp, info, nfev
        }

        mc.dginit = ddot(size, g, s) //g(x_k)*(-Hg(x_k)), f正定，故<0, gk*pk
        if mc.dginit >= 0.0 {        //方向错误
            //fmt.Println("exit with info: ", info)
            return stp, info, nfev
        }

        mc.brackt = false
        mc.stage1 = true
        nfev = 0

        mc.finit = f                 //store f(x_k)
        mc.dgtest = FTOL * mc.dginit // c1*gk*pk. 可能的减小值
        mc.width = LB3_1_stpmax - LB3_1_stpmin
        mc.width1 = float64(mc.width) / p5

        for j := 0; j < size; j++ {
            wa[j] = x[j] //store x_k. wa used diagonal matrix, what's it ?
        }

        mc.stx = 0.0
        mc.fx = mc.finit
        mc.dgx = mc.dginit
        mc.sty = 0.0
        mc.fy = mc.finit
        mc.dgy = mc.dginit

        //fmt.Println("first init in mcsrch with info:",info)
    }

    for {
        if info != -1 {
            if mc.brackt {
                mc.stmin = math.Min(mc.stx, mc.sty)
                mc.stmax = math.Max(mc.stx, mc.sty)
            } else {
                mc.stmin = mc.stx
                mc.stmax = stp + xtrapf*(stp-mc.stx)
            }

            stp = math.Max(stp, LB3_1_stpmin)
            stp = math.Min(stp, LB3_1_stpmax)

            if (mc.brackt && (stp <= mc.stmin || stp >= mc.stmax)) || nfev >= maxfev-1 || mc.infoc == 0 ||
            (mc.brackt && (mc.stmax-mc.stmin <= XTOL*mc.stmax)) {
                stp = mc.stx
            }

            //fmt.Println("here goto new x with stp:", stp)
            //fmt.Println(wa, s[0:size])
            for j := 0; j < size; j++ {
                x[j] = wa[j] + stp*s[j] //x_k+1 =x_k + stp * (-gh)
            }
            info = -1
            //fmt.Println("exit with info: ", info)
            return stp, info, nfev
        }

        info = 0
        nfev++
        dg := ddot(size, g, s)             //g(x_k+1)*pk,  dg >= c2*g(x_k)*pk: curvature condition
        ftest1 := mc.finit + stp*mc.dgtest //f(x_k)+stp* c1*g(x_k)*pk , f <= ftest1: sufficient condition

        if mc.brackt && ((stp <= mc.stmin || stp >= mc.stmax) || mc.infoc == 0) {
            info = 6
        }

        if stp == LB3_1_stpmax && f <= ftest1 && dg <= mc.dgtest { // 最大步长, 满足sufficient, not curvature
            info = 5
        }

        if stp == LB3_1_stpmin && (f > ftest1 || dg >= mc.dgtest) { //最小步长， 不满足sufficient
            info = 4
        }
        if nfev >= maxfev {
            info = 3
        }

        if mc.brackt && mc.stmax-mc.stmin <= XTOL*mc.stmax {
            info = 2
        }

        if f < ftest1 && math.Abs(dg) <= LB3_1_gtol*(-1)*mc.dginit { // |dg|<=c2*(-g(x_k)*(-1)*Hg(x_k)) , 强wolf条件, 说明x1的选择是合适的
            info = 1
        }

        if info != 0 {
            //fmt.Println("exit with info: ", info)
            return stp, info, nfev
        }

        //fmt.Println("here goto mcstep")

        if mc.stage1 && f <= ftest1 && dg >= math.Min(FTOL, LB3_1_gtol)*mc.dginit { //下降方向，但是梯度条件不满足
            mc.stage1 = false
        }

        if mc.stage1 && f <= mc.fx && f > ftest1 { //although 下降方向，但是下降的不够
            fm := f - stp*mc.dgtest
            fxm := mc.fx - mc.stx*mc.dgtest
            fym := mc.fy - mc.sty*mc.dgtest
            dgm := dg - mc.dgtest
            dgxm := mc.dgx - mc.dgtest
            dgym := mc.dgy - mc.dgtest

            mc.stx, fxm, dgxm, mc.sty, fym, dgym, stp, mc.brackt, mc.infoc = mcstep(mc.stx, fxm, dgxm, mc.sty, fym, dgym, stp, fm, dgm, mc.brackt, mc.stmin, mc.stmax, mc.infoc)
            mc.fx = fxm + mc.stx*mc.dgtest
            mc.fy = fym + mc.sty*mc.dgtest
            mc.dgx = dgxm + mc.dgtest
            mc.dgy = dgym + mc.dgtest
        } else {
            mc.stx, mc.fx, mc.dgx, mc.sty, mc.fy, mc.dgy, stp, mc.brackt, mc.infoc = mcstep(mc.stx, mc.fx, mc.dgx, mc.sty, mc.fy, mc.dgy, stp, f, dg, mc.brackt, mc.stmin, mc.stmax, mc.infoc)
        }

        if mc.brackt {
            dl := mc.sty - mc.stx
            if math.Abs(dl) >= p66*mc.width1 {
                stp = mc.stx + p5*(mc.sty-mc.stx)
            }
            mc.width1 = mc.width
            mc.width = math.Abs(dl)
        }
    }
    //    return stp, info, nfev
}

type StringError string

func (s StringError) Error() string {
    return string(s)
}

func (f *Lbfgs) Optimize(size int, x []float64, fx float64, g []float64, orthant bool, c float64) (int, error) {
    msize := 5

    if f.w_ == nil || len(f.w_) == 0 {
        f.iflag_ = 0
        f.w_ = make([]float64, size*(2*msize+1)+2*msize)
        f.diag_ = make([]float64, size)
        f.v_ = make([]float64, size)
        if orthant {
            f.xi_ = make([]float64, size)
        }
    } else if (len(f.diag_)) != size || (len(f.v_)) != size {
        return -1, StringError("size of array is different")
    } else if orthant && (len(f.v_)) != size {
        return -1, StringError("size of arrya is different")
    }

    if orthant {
        f.iflag_ = f.lbfgs_optimize(size, msize, x, fx, g, f.diag_, f.w_, orthant, c, f.v_, f.xi_, f.iflag_)
    } else {
        f.iflag_ = f.lbfgs_optimize(size, msize, x, fx, g, f.diag_, f.w_, orthant, c, g, f.xi_, f.iflag_)
    }

    if f.iflag_ < 0 {
        return -1, StringError("routine stops with unexpected error")
    }

    if f.iflag_ == 0 {
        return 0, nil
    }

    return 1, nil
}

func ddot(size int, dx []float64, dy []float64) float64 { //dx,dy的内积
    all := 0.0
    for i := 0; i < size; i++ {
        all += dx[i] * dy[i]
    }
    return all
}

func sigma(x float64) float64 {
    if x > 0 {
        return 1.0
    } else if x < 0 {
        return -1.0
    }
    return 0.0
}

func daxpy(size int, da float64, dx []float64, dy []float64) {
    for i := 0; i < size; i++ {
        dy[i] += da * dx[i]
    }
}

func (f *Lbfgs) lbfgs_optimize(size, msize int, x []float64, fx float64, g, diag, w []float64, orthant bool, c float64, v, xi []float64 , iflag int) int {
    yy, ys := 0.0, 0.0
    bound, cp := 0, 0

    if f.mc_ == nil {
        f.mc_ = new(Mcsrch)
    }

    //    if iflag == 1 { //f and g have been calculated, goto L172 to test if x is suitable
    //        goto L172
    //    }
    //    if iflag == 2 {
    //        goto L100
    //    }

    if iflag == 0 {
        f.point = 0
        for i := 0; i < size; i++ {
            diag[i] = 1.0
        }
        f.ispt = size + (msize << 1) //point to start index of pk/sk
        f.iypt = f.ispt + size*msize //point to start index of yk

        //fmt.Println(len(v), len(diag), size)

        for i := 0; i < size; i++ {
            w[f.ispt+i] = -1 * v[i] * diag[i] //-gh, search direction
        }
        f.stp1 = 1.0 / (math.Sqrt(ddot(size, v, v))) //||g||2 范数的倒数
    }

    old_flag := iflag
    for {
        if iflag != 1 {     //当iflag == 1时，直接跳转到L172，不经过这里
            f.iter++
            f.info = 0
            if orthant {
                for i := 0; i < size; i++ {
                    if x[i] != 0 {
                        x[i] = sigma(x[i])
                    } else {
                        x[i] = sigma(-1 * v[i])
                    }
                }
            }

            if f.iter == 1 { //first iter, goto reset part
                goto L165
            }
            //fmt.Printf("goto here with iter:%d, iflag:%d\n", f.iter, iflag)
            if f.iter > msize {
                bound = msize
            }

            ys = ddot(size, w[f.iypt+f.npt:], w[f.ispt+f.npt:]) //sk*yk
            yy = ddot(size, w[f.iypt+f.npt:], w[f.iypt+f.npt:]) //yk*yk
            //fmt.Println("ys = ",ys, "yy= ",yy)

            for i := 0; i < size; i++ {
                diag[i] = ys / yy //update diagonal matrix
            }

            //            L100:
            cp = f.point
            if f.point == 0 {
                cp = msize
            }

            w[size+cp-1] = 1.0 / ys //r_k

            for i := 0; i < size; i++ {
                w[i] = -v[i] //-g(x_k+1)
            }

            if f.iter-1 < msize {
                bound = f.iter - 1
            } else {
                bound = msize
            }

            cp = f.point
            //fmt.Println("start to modify H with cp:",cp, "w=", w[:size], "diag=", diag)
            //fmt.Println("sk = ", w[f.ispt+(cp-1)*size:f.ispt+cp*size], "yk=", w[f.iypt+(cp-1)*size:f.iypt+cp*size])
            for i := 1; i <= bound; i++ { //最新back到最久
                cp--
                if cp == -1 {
                    cp = msize - 1
                }

                sq := ddot(size, w[f.ispt+cp*size:], w) //sk* w
                inmc := size + msize + cp
                f.iycn = f.iypt + cp*size //point to index of w[iy], yk
                w[inmc] = w[size+cp] * sq //a_i = r_k * sk* w
                d := -1 * w[inmc]
                daxpy(size, d, w[f.iycn:], w) //w = w - a_i * yk
            }

            for i := 0; i < size; i++ {
                w[i] = diag[i] * w[i]
            }

            for i := 1; i <= bound; i++ { //最久front到最新
                yr := ddot(size, w[f.iypt+cp*size:], w) //yk * r
                beta := w[size+cp] * yr                 //b_k := r_k * yk *r
                inmc := size + msize + cp
                beta = w[inmc] - beta //b_k - a_k
                f.iscn = f.ispt + cp*size
                daxpy(size, beta, w[f.iscn:], w) //w +=(b_k - a_k) * sk
                cp++
                if cp == msize {
                    cp = 0
                }
            }

            if orthant {
                for i := 0; i < size; i++ {
                    if sigma(w[i]) == sigma(-v[i]) {
                        w[i] = w[i]
                    } else {
                        w[i] = 0.0
                    }
                }
            }

            for i := 0; i < size; i++ {
                w[f.ispt+f.point*size+i] = w[i] //store w[i] in next index of xk
            }
            //here， new point x and search direction has been store in x and w[ispt+point*size:]

            L165:
            f.nfev = 0 //reset nfev to 0
            f.stp = 1.0 //reset stp to 0
            if f.iter == 1 {
                f.stp = f.stp1
            }
            for i := 0; i < size; i++ {
                w[i] = g[i] //w[0~size] store init gradient
            }

            //fmt.Printf("goto here with old_flag:%d, iflag:%d\n ",old_flag, iflag)
            iflag = old_flag
        }
        //fmt.Println("goto L172 with iflag: ", iflag)

        //        L172:
        f.stp, f.info, f.nfev = f.mc_.mcsrch(size, x, fx, v, w[f.ispt+f.point*size:], f.stp, f.info, f.nfev, diag) //x store x_k+1,diag store x_k
        if f.info == -1 {
            if orthant {
                for i := 0; i < size; i++ {
                    if sigma(x[i]) == sigma(x[i]) {
                        x[i] = x[i]
                    } else {
                        x[i] = 0.0
                    }
                }
            }
            iflag = 1
            return iflag
        }
        if f.info != 1 {
            fmt.Println("The line search routine mcsrch failed: error code ", f.info)
            iflag = -1
            return iflag
        }

        //here means x store x_k+1 is approciate, so store sk, yk
        f.npt = f.point * size
        //fmt.Println("before modify, sk(k=",f.point,") is :", w[f.ispt+f.npt:f.ispt+f.npt+size])
        //fmt.Println("before modify, yi(k=",f.point,") is :", w[:size], g)

        for i := 0; i < size; i++ {
            w[f.ispt+f.npt+i] = f.stp * w[f.ispt+f.npt+i] //stp * -gh (stp * -gradient), s_k :x_k+1 - x_k
            w[f.iypt+f.npt+i] = g[i] - w[i]             //y_k : g(x_k+1) -g(x_k)
        }
        //fmt.Println("after modify, sk(k=",f.point,") is :", w[f.ispt+f.npt:f.ispt+f.npt+size])
        //fmt.Println("after modify, yk(k=",f.point,") is :", w[f.iypt+f.npt:f.iypt+f.npt+size])
        f.point++

        if f.point == msize { //circulate, when has store more than msize vector, ignore the front
            f.point = 0
        }

        gnorm := math.Sqrt(ddot(size, v, v))
        xnorm := math.Max(1.0, math.Sqrt(ddot(size, x, x)))

        if gnorm/xnorm <= EPS {
            iflag = 0
            return iflag
        }

        old_flag = iflag
        iflag = 9       //set a random value, not 1 to foreach
    }

    return iflag
}

func mcstep(stx, fx, dx float64, sty, fy, dy float64, stp, fp, dp float64, brackt bool, stpmin, stpmax float64, info int) (float64, float64, float64, float64, float64, float64, float64,  bool, int) {
    bound := true
    var p, q, s, r, gamma, theta, stpq, stpc, stpf float64
    info = 0

    if (brackt && (stp <= math.Min(stx, sty) || stp >= math.Max(stx, sty))) || dx*(stp-stx) >= 0.0 || stpmax < stpmin { //dx * stp-stx means increace direction
        return stx, fx, dx, sty, fy, dy, stp, brackt, info
    }

    sgnd := dp * dx / math.Abs(dx) //dx和dp的符号

    if fp > fx { //fp > fx, means 步长太大，且合适的点在stx和stp之间。因为stp是沿下降方向找的
        info = 1
        bound = true
        theta = (fx-fp)*3.0/(stp-stx) + dx + dp
        s = math.Max(math.Max(math.Abs(dx), math.Abs(dp)), math.Abs(theta))
        gamma = s * math.Sqrt((theta/s)*(theta/s)-(dx/s)*(dp/s))
        if stp < stx {
            gamma = -1 * gamma
        }
        p = gamma - dx + theta
        q = gamma + gamma - dx + dp
        r = p/q
        stpc = stx + r *(stp-stx)                             //cube interpolation
        stpq = stx + ((dx/((fx-fp)/(stp-stx)+dx))/2.0)*(stp-stx) //variant 割线法

        if math.Abs(stpc-stx) < math.Abs(stpq-stx) {
            stpf = stpc
        } else {
            stpf = stpc + (stpq-stpc)/2.0
        }
        brackt = true

    } else if sgnd < 0.0 {
        info = 2
        bound = false
        theta = (fx-fp)*3.0/(stp-stx) + dx + dp
        s = math.Max(math.Max(math.Abs(dx), math.Abs(dp)), math.Abs(theta))
        gamma = s * math.Sqrt((theta/s)*(theta/s)-(dx/s)*(dp/s))
        if stp > stx {
            gamma = -1 * gamma
        }

        p = gamma - dp + theta
        q = gamma - dp + gamma + dx
        r = p/q
        stpc = stp + r *(stx-stp)
        stpq = stp + (dp/(dp-dx))*(stx-stp)

        if math.Abs(stpc-stp) > math.Abs(stpq-stp) {
            stpf = stpc
        } else {
            stpf = stpq
        }
        brackt = true

    } else if math.Abs(dp) < math.Abs(dx) {
        info = 3
        bound = true
        theta = (fx-fp)*3.0/(stp-stx) + dx + dp
        s = math.Max(math.Max(math.Abs(dx), math.Abs(dp)), math.Abs(theta))
        gamma = s * math.Sqrt((theta/s)*(theta/s)-(dx/s)*(dp/s))

        if stp > stx {
            gamma = -1.0 * gamma
        }

        p = gamma - dp + theta
        q = gamma + dx - dp + gamma

        r = p / q

        if r < 0.0 && gamma != 0.0 {
            stpc = stp + r*(stx-stp)
        } else if stp > stx {
            stpc = stpmax
        } else {
            stpc = stpmin
        }

        stpq = stp + (dp/(dp-dx))*(stx-stp)
        if brackt {
            if math.Abs(stp-stpc) < math.Abs(stp-stpq) {
                stpf = stpc
            } else {
                stpf = stpq
            }
        } else {
            if math.Abs(stp-stpc) > math.Abs(stp-stpq) {
                stpf = stpc
            } else {
                stpf = stpq
            }
        }

    } else {
        info = 4
        bound = false
        if brackt {
            theta = 3.0*(fp-fy)/(sty-stp) + dy + dp
            s = math.Max(math.Max(math.Abs(dy), math.Abs(dp)), math.Abs(theta))
            gamma = s * math.Sqrt((theta/s)*(theta/s)-(dy/s)*(dp/s))
            if stp > sty {
                gamma = -1.0 * gamma
            }
            p = gamma - dp + theta
            q = gamma - dp + gamma + dy
            r = p / q
            stpc = stp + r*(sty-stp)
            stpf = stpc
        } else if stp > stx {
            stpf = stpmax
        } else {
            stpf = stpmin
        }
    }

    if fp > fx {
        sty = stp
        fy = fp
        dy = dp
    } else {
        if sgnd < 0.0 {
            sty = stx
            fy = fx
            dy = dx
        }
        stx = stp
        fx = fp
        dx = dp
    }

    stpf = math.Min(stpmax, stpf)
    stpf = math.Max(stpmin, stpf)
    stp = stpf

    if brackt && bound {
        if sty > stx {
            stp = math.Min(stx+0.66*(sty-stx), stp)
        } else {
            stp = math.Max(stx+0.66*(sty-stx), stp)
        }
    }

    return stx, fx, dx, sty, fy, dy, stp, brackt, info
}

func Optimize(size int, x []float64, f float64, g []float64, orthant bool, c float64) (int, error) {
    return DefaultLbfgs.Optimize(size, x, f, g, orthant, c)
}
